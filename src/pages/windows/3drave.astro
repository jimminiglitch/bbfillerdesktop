```astro
```astro
```astro
```astro
        <!-- Loading Screen -->
        <div id="loading-screen">
        <div class="loading-container">
            <h1 id="loading-text">INITIALIZING NEURAL INTERFACE</h1>
            <div class="progress-container">
                <div class="progress-bar">
                    <div id="progress-fill" style="width: 0%; height: 100%; background-color: #4caf50;"></div>
                </div>
                <div id="progress-percent">0%</div>
            </div>
        </div>
    </div>

    <!-- Main Canvas -->
    <canvas id="scene-canvas"></canvas>

    <!-- UI Elements -->
    <div id="ui-container">
        <!-- Top Bar -->
        <div id="top-bar">
            <div id="track-info">Ready to play</div>
            <div id="controls">
                <button id="fullscreen-button" class="control-button" title="Toggle Fullscreen (F)">
                    <span class="icon">‚õ∂</span>
                </button>
                <button id="theme-button" class="control-button" title="Change Theme (T)">
                    <span class="icon">üé®</span>
                </button>
                <button id="track-button" class="control-button" title="Select Track (N)">
                    <span class="icon">üéµ</span>
                </button>
                <button id="audio-button" class="control-button" title="Toggle Audio (M)">
                    <span class="icon">üîä</span>
                </button>
                <button id="settings-button" class="control-button" title="Settings (P)">
                    <span class="icon">‚öôÔ∏è</span>
                </button>
                <button id="help-button" class="control-button" title="Help (H)">
                    <span class="icon">?</span>
                </button>
            </div>
        </div>

        <!-- Audio Visualizer -->
        <canvas id="audio-visualizer"></canvas>

        <!-- Status Messages -->
        <script is:inline>
            function togglePerformanceMode(isActive) {
                const performanceModeElement = document.getElementById('performance-mode');
                if (isActive && performanceModeElement) {
                    performanceModeElement.classList.remove('hidden');
                } else if (performanceModeElement) {
                    performanceModeElement.classList.add('hidden');
                }
            }
        </script>
        
        <!-- Track Selection Panel -->
        <div id="track-selection" class="panel hidden">
                <h2>{"Select Track"}</h2>
                <h2>Select Track</h2>
                <button id="close-tracks" class="close-button">√ó</button>
            </div>
            <div id="track-list">
                <!-- Track options will be populated here -->
            </div>
        </div>
        </div>

        <!-- Controls Info -->
        <div id="controls-info" class="panel hidden">
                <h2>{"Controls"}</h2>
                <h2>Controls</h2>
                <button id="close-controls" class="close-button">√ó</button>
            </div>
            <div class="controls-list">
                <div class="control-item">
                    <span class="key">W, A, S, D</span>
                    <span class="description">Move around</span>
                </div>
                <div class="control-item">
                    <span class="key">SPACE</span>
                    <span class="description">Fly up</span>
                </div>
                <div class="control-item">
                    <span class="key">SHIFT</span>
                    <span class="description">Fly down</span>
                </div>
                <div class="control-item">
                    <span class="key">MOUSE</span>
                    <span class="description">Look around</span>
                </div>
                <div class="control-item">
                    <span class="key">ESC</span>
                    <span class="description">Release mouse</span>
                </div>
                <div class="control-item">
                    <span class="key">F</span>
                    <span class="description">Toggle fullscreen</span>
                </div>
                <div class="control-item">
                    <span class="key">M</span>
                    <span class="description">Toggle audio</span>
                </div>
                <div class="control-item">
                    <span class="key">T</span>
                    <span class="description">Change theme</span>
                </div>
                <div class="control-item">
                    <span class="key">N</span>
                    <span class="description">Next track</span>
                </div>
                <div class="control-item">
                    <span class="key">P</span>
                    <span class="description">Settings</span>
                </div>
                <div class="control-item">
                    <span class="key">H</span>
                    <span class="description">Show/hide this help</span>
                </div>
            </div>
        </div>

        <!-- Settings Panel -->
        <div id="settings-panel-unique" class="panel hidden">
                <h2>{"Settings"}</h2>
                <h2>Settings</h2>
                <button id="settings-close-main" class="close-button">√ó</button>
            </div>
            <div class="settings-content">
                <div id="settings-panel-secondary" class="panel hidden">
                    <div class="panel-header">
                        <h2>Settings</h2>
                        <button id="settings-close" class="close-button">√ó</button>
                    </div>
                    <div class="settings-content">
                            <h3>{"Performance"}</h3>
                            <h3>Performance</h3>
                                <label htmlFor="quality-setting" title="Select a quality preset for performance or visual fidelity.">Quality Preset:</label>
                                <label for="quality-setting" title="Select a quality preset for performance or visual fidelity.">Quality Preset:</label>
                                <select id="quality-setting">
                                    <option value="low" title="Low: Optimized for better performance.">Low</option>
                                    <option value="medium" title="Medium: Balanced between performance and visuals." selected>Medium</option>
                                    <option value="high" title="High: Enhanced visuals with moderate performance impact.">High</option>
                                    <option value="ultra" title="Ultra: Best visuals with higher performance demand.">Ultra</option>
                                </select>
                            </div>
                            <div class="setting-item">
                                <label htmlFor="auto-optimize-setting">Auto-Optimize for Device</label>
                                <label for="auto-optimize-setting">Auto-Optimize for Device</label>
                                <input type="checkbox" id="auto-optimize-setting">
                            </div>
                        </div>
                    </div>
                </div>
                
                    <h3>{"Visual Effects"}</h3>
                    <h3>Visual Effects</h3>
                        <label htmlFor="bloom-setting">Bloom Intensity:</label>
                        <label for="bloom-setting">Bloom Intensity:</label>
                        <input type="range" id="bloom-setting" min="0" max="3" step="0.1" value="1.2">
                        <span class="setting-value">1.2</span>
                    </div>
                        <label htmlFor="glitch-setting">Glitch Intensity:</label>
                        <label for="glitch-setting">Glitch Intensity:</label>
                        <input type="range" id="glitch-setting" min="0" max="1" step="0.05" value="0.15">
                        <span class="setting-value">0.15</span>
                    </div>
                        <label htmlFor="color-shift-setting">Color Shift Speed:</label>
                        <label for="color-shift-setting">Color Shift Speed:</label>
                        <input type="range" id="color-shift-setting" min="0" max="3" step="0.1" value="1.0">
                        <span class="setting-value">1.0</span>
                    </div>
                </div>
                
                    <h3>{"Audio"}</h3>
                    <h3>Audio</h3>
                        <label htmlFor="volume-setting">Volume:</label>
                        <label for="volume-setting">Volume:</label>
                        <input type="range" id="volume-setting" min="0" max="100" step="1" value="70" oninput="updateVolumeDisplay(this.value)">
                        <span id="volume-display" class="setting-value">70%</span>
                    </div>
                    <script is:inline>
                        function updateVolumeDisplay(value) {
                            const displayElement = document.getElementById('volume-display');
                            if (displayElement) {
                                displayElement.textContent = `${value}%`;
                            }
                        }
                    </script>
                        <label htmlFor="bass-setting">Bass Impact:</label>
                        <label for="bass-setting">Bass Impact:</label>
                        <input type="range" id="bass-setting" min="0" max="3" step="0.1" value="1.5">
                        <span class="setting-value">1.5</span>
                    </div>
                        <label htmlFor="random-tracks-setting">Randomize Tracks</label>
                        <label for="random-tracks-setting">Randomize Tracks</label>
                        <input type="checkbox" id="random-tracks-setting" checked>
                    </div>
                </div>
                        <script type="module" src="/src/scripts/updateVolumeDisplay.js"></script>
                    </div>
                    <div id="dancer-warning" class="tooltip hidden">High values may impact performance!</div>
                    
                        <label htmlFor="dancer-detail-setting">Dancer Detail:</label>
                        <label for="dancer-detail-setting">Dancer Detail:</label>
                        <select id="dancer-detail-setting">
                            <option value="low">Low</option>
                            <option value="medium" selected>Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
<script is:inline>
    function togglePerformanceMode(isActive) {
        const performanceModeElement = document.getElementById('performance-mode');
        if (isActive && performanceModeElement) {
            performanceModeElement.classList.remove('hidden');
        } else if (performanceModeElement) {
            performanceModeElement.classList.add('hidden');
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        // Make functions available globally
        window.togglePerformanceMode = function(isActive) {
            const performanceModeElement = document.getElementById('performance-mode');
            if (isActive && performanceModeElement) {
                performanceModeElement.classList.remove('hidden');
            } else if (performanceModeElement) {
                performanceModeElement.classList.add('hidden');
            }
        };

        window.updateVolumeDisplay = function(value) {
            const displayElement = document.getElementById('volume-display');
            if (displayElement) {
                displayElement.textContent = `${value}%`;
            }
        };

        window.updateDancerWarning = function(value) {
            const warning = document.getElementById('dancer-warning');
            const settingValue = document.querySelector('#dancer-count-setting + .setting-value');
            if (settingValue) {
                settingValue.textContent = value;
            }
            if (warning) {
                if (parseInt(value) > 150) {
                    warning.classList.remove('hidden');
                } else {
                    warning.classList.add('hidden');
                }
            }
        };
    });
</script>

<script>
    // TypeScript interface to extend the Window object
    interface MyWindow extends Window {
        togglePerformanceMode: (isActive: boolean) => void;
        updateVolumeDisplay: (value: string) => void;
        updateDancerWarning: (value: string) => void;
    }
    
    declare global {
        interface Window {
            togglePerformanceMode: (isActive: boolean) => void;
            updateVolumeDisplay: (value: string) => void;
            updateDancerWarning: (value: string) => void;
        }
    }
</script>
</script>
